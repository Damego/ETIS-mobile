import { ThemeType } from '~/styles/themes';

export interface EventData {
  suggestedTheme: boolean;
  previousTheme: ThemeType;
}

export interface Events {
  halloween?: EventData;
  newYear?: EventData;
}

const isInDateRange = (startDate: Date, endDate: Date, checkCondition: 'and' | 'or' = 'and') => {
  const currentDateTime = Date.now();
  const stateDateTime = startDate.getTime();
  const endDateTime = endDate.getTime();

  if (checkCondition === 'and')
    return currentDateTime > stateDateTime && currentDateTime < endDateTime;

  // ะัะธะผะตะฝะธะผะพ ะธัะบะปััะธัะตะปัะฝะพ ะบ ะฟัะพะผะตะถััะบั, ะบะพัะพััะน ะฝะฐัะธะฝะฐะตััั ะฒ ะพะดะฝะพะผ ะณะพะดั, ะฐ ะทะฐะบะฐะฝัะธะฒะฐะตััั ะฒ ัะปะตะดัััะตะผ
  if (checkCondition === 'or')
    return currentDateTime > stateDateTime || currentDateTime < endDateTime;
};

export const isHalloween = () => {
  const year = new Date().getFullYear();
  const startDate = new Date(year, 9, 28);
  const endDate = new Date(year, 10, 4);

  return isInDateRange(startDate, endDate);
};

export const halloweenEmptyDayResponses = [
  'ะะฐะปะปั ะธะปะธ ะถะธะทะฝั? ๐ฏ',
  'ะัะพัะฐ ะฝะฐ ะฟัะธะทัะฐะบะพะฒ ๐ป',
  'ะัััะบะธ ั ะฟัะธะทัะฐะบะฐะผะธ ๐ป',
  '๐',
  '๐ป',
  '๐ท',
  '๐ธ',
  'ะัะผะตัะฐะตะผ ััะปะปะพัะธะฝ ๐',
];

export const isNewYear = () => {
  const year = new Date().getFullYear();
  const startDate = new Date(year, 11, 9);
  const endDate = new Date(year, 0, 15);
  // ะะพะฒะพะณะพะดะฝะตะต ัะพะฑััะธะต ะฝะฐัะธะฝะฐะตััั ะฒ ะพะดะฝะพะผ ะณะพะดั,
  // ะฐ ะทะฐะบะฐะฝัะธะฒะฐะตััั ะฒ ัะปะตะดัััะตะผ,
  // ะฟะพััะพะผั ะฟัะพะฒะตััะตะผ ัะพะปัะบะพ ะผะตััั ะธ ะดะตะฝั, ะฐ ะทะฝะฐัะตะฝะธะต ะณะพะดะฐ ะพะบะพะฝัะฐะฝะธั ัะพะฑััะธั ัะฒะปัะตััั ัะตะบััะธะผ
  return isInDateRange(startDate, endDate, 'or');
};

export const newYearEmptyDayResponse = [
  'ะะดะธะผ ะผะฐะฝะดะฐัะธะฝั ๐',
  'ะะฐััะถะฐะตะผ ัะปะบั ๐',
  'ะะธัะตะผ ะะตะดั ะะพัะพะทั ๐',
  'ะะพะฒะธะผ ัะฝะตะถะธะฝะบะธ โ๏ธ',
  'ะะตะฟะธะผ ัะฝะตะณะพะฒะธะบะฐ โ๏ธ',
  'ะัะผะตัะฐะตะผ ะฝะพะฒัะน ะณะพะด๐',
  'ะก ะฝะพะฒัะผ ะณะพะดะพะผ ๐',
  '๐',
  '๐',
  '๐',
  'โ๏ธ',
  'โ๏ธ',
  '๐',
];
